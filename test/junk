# this script tests to see if the structure of the dictionary is readable and the
# necessary information is easily accessible

# unenforcable consts
SMALLEST_SINGLE_PATH = 2
LONGEST_SINGLE_PATH = 8
VERT_NUM = 6

# captures the distance of all nodes to a node destination without having to backtrack
non_bcktrk_dist_dict = defaultdict(dict)

f = open('output', 'r+')
pp = PrettyPrinter()


def distance_calc():
    for node in range(VERT_NUM):
        current_letter = chr(ord('A') + node)
        print("Current Letter: " + current_letter)
        for adj_node in range(VERT_NUM):
            current_adj_node = chr(ord('A') + adj_node)
            print("\tcurrent adjacent letter: " + current_adj_node)
            if current_adj_node is not current_letter:
                non_bcktrk_dist_dict[current_letter][current_adj_node] = gaussian_sum(current_letter, current_adj_node)
                pp.pprint(non_bcktrk_dist_dict[current_letter])
            else:
                print("Same as current letter")


def write_dict():
    f.write("Calculated Values")

    for node in non_bcktrk_dist_dict:
        f.write("\n\t" + node + " = ")
        for adj_node in non_bcktrk_dist_dict[node]:
            f.write(adj_node + " : " + str(non_bcktrk_dist_dict[node][adj_node]) + ",\t")


def gaussian_sum(starting_letter, terminal_letter):
    a_range = ord(starting_letter) - 65 + 1
    b_range = ord(terminal_letter) - 65 + 1
    g_sum = abs((b_range * (b_range + 1) - a_range * (a_range + 1)) / 2)

    print("\t\t" + starting_letter + "->" + terminal_letter + ":")
    print("\t\t\tA-Range: " + str(a_range))
    print("\t\t\tB-Range: " + str(b_range))
    print("\t\t\tG-Sum: " + str(g_sum))

    return g_sum

def create_path(subject_node, dest_node, vertex_dict, distance_sum, discovered):
    discovered.append(subject_node)
    if subject_node == dest_node:
        f.write(dest_node + " : " + str(float(distance_sum)) + ",\t")
        print("\t\tCompleted, distance: " + str(distance_sum))
        return True

    found_flag = False
    for adj_node in vertex_dict[subject_node]:
        if found_flag:
            break
        if adj_node not in discovered:
            distance_to_node = vertex_dict[subject_node][adj_node]
            print("\t\t\t" + subject_node + "->" + adj_node + ", " + str(distance_to_node))

            found_flag = create_path(adj_node, dest_node, vertex_dict, distance_sum + distance_to_node, discovered)

    return found_flag

def set_dest(path):
    vertex_list = read_file(path)
    f.write("\nTravelled Values")

    for source in vertex_list:
        print("Source: " + source)
        f.write("\n\t" + source + " = ")
        for destination in vertex_list:
            if source != destination:
                print("\tDestination: " + destination)
                create_path(source, destination, vertex_list, 0, [])